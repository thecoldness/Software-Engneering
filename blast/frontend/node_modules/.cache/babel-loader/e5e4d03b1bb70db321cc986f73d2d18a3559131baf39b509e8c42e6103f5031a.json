{"ast":null,"code":"var _jsxFileName = \"/Users/thecold/Desktop/courses/2025 Spring/Software Engneering/Final Project/blast/frontend/src/components/MultiPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { API_BASE_URL } from '../config';\nimport GameRoom from './GameRoom';\nimport GameLobby from './GameLobby';\nimport SpectatorView from './SpectatorView';\nimport './MultiPlayer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MultiPlayer() {\n  _s();\n  const socketRef = useRef(null);\n  const [rooms, setRooms] = useState([]); // 添加 rooms 状态\n  const [gameState, setGameState] = useState({\n    roomId: null,\n    currentRound: 0,\n    maxRounds: 3,\n    status: 'lobby',\n    isReady: false\n  });\n  useEffect(() => {\n    // 使用完整的配置选项\n    const socket = io(API_BASE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true,\n      timeout: 10000\n    });\n    socketRef.current = socket;\n    const handlers = {\n      connect: () => {\n        console.log('Connected to server');\n        socket.emit('getRooms'); // 连接后请求房间列表\n      },\n      disconnect: reason => {\n        console.log('Disconnected:', reason);\n      },\n      connect_error: error => {\n        console.error('Connection error:', error);\n      },\n      roomsList: roomsList => {\n        console.log('Received rooms list:', roomsList);\n        setRooms(roomsList); // 处理房间列表更新\n      },\n      roomCreated: data => {\n        setGameState(prev => ({\n          ...prev,\n          roomId: data.roomCode,\n          status: 'room'\n        }));\n      },\n      roomJoined: data => {\n        setGameState(prev => ({\n          ...prev,\n          roomId: data.roomId,\n          currentRound: data.currentRound,\n          maxRounds: data.maxRounds,\n          status: 'room'\n        }));\n      },\n      playersReadyStatus: ({\n        readyPlayers\n      }) => {\n        // 处理玩家准备状态更新\n        console.log('Players ready status updated:', readyPlayers);\n        // 更新本地状态，标记当前玩家是否已准备\n        if (socketRef.current) {\n          setGameState(prev => ({\n            ...prev,\n            isReady: readyPlayers.includes(socketRef.current.id)\n          }));\n        }\n      },\n      chatHistory: messages => {\n        // 处理历史聊天记录\n        console.log('Received chat history:', messages);\n        // 这里可以将历史消息传递给GameRoom组件\n      },\n      error: console.error\n    };\n    Object.entries(handlers).forEach(([event, handler]) => {\n      socket.on(event, handler);\n    });\n    return () => {\n      if (socket) {\n        Object.keys(handlers).forEach(event => {\n          socket.off(event);\n        });\n        socket.disconnect();\n      }\n    };\n  }, []);\n  const handleCreateRoom = useCallback((settings = {}) => {\n    if (!socketRef.current) return;\n    const roomSettings = {\n      maxRounds: settings.maxRounds || 3\n    };\n    socketRef.current.emit('createRoom', roomSettings);\n  }, []);\n  const handleJoinRoom = roomId => {\n    if (socketRef.current) {\n      socketRef.current.emit('joinRoom', roomId);\n      setGameState(prev => ({\n        ...prev,\n        status: 'room'\n      }));\n    }\n  };\n  const handleSpectateRoom = roomId => {\n    if (socketRef.current) {\n      socketRef.current.emit('spectateRoom', roomId);\n      setGameState(prev => ({\n        ...prev,\n        status: 'spectate'\n      }));\n    }\n  };\n  const handlePlayerReady = () => {\n    if (socketRef.current && gameState.roomId) {\n      socketRef.current.emit('playerReady', {\n        roomId: gameState.roomId\n      });\n      setGameState(prev => ({\n        ...prev,\n        isReady: true\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"multiplayer-container\",\n    children: [gameState.status === 'lobby' && /*#__PURE__*/_jsxDEV(GameLobby, {\n      rooms: rooms,\n      maxRounds: gameState.maxRounds,\n      setMaxRounds: rounds => setGameState(prev => ({\n        ...prev,\n        maxRounds: rounds\n      })),\n      onCreateRoom: handleCreateRoom,\n      onJoinRoom: handleJoinRoom,\n      onSpectateRoom: handleSpectateRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this), gameState.status === 'room' && /*#__PURE__*/_jsxDEV(GameRoom, {\n      socket: socketRef.current,\n      roomId: gameState.roomId,\n      currentRound: gameState.currentRound,\n      maxRounds: gameState.maxRounds,\n      scores: gameState.scores,\n      isReady: gameState.isReady,\n      onReady: handlePlayerReady\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this), gameState.status === 'spectate' && /*#__PURE__*/_jsxDEV(SpectatorView, {\n      roomId: gameState.roomId,\n      socket: socketRef.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n// 防抖函数\n_s(MultiPlayer, \"1sXmVKnTfW8aXoEYRkXDfV1j6u0=\");\n_c = MultiPlayer;\nfunction debounce(fn, delay) {\n  let timer = null;\n  return function (...args) {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => fn(...args), delay);\n  };\n}\nexport default MultiPlayer;\nvar _c;\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","io","API_BASE_URL","GameRoom","GameLobby","SpectatorView","jsxDEV","_jsxDEV","MultiPlayer","_s","socketRef","rooms","setRooms","gameState","setGameState","roomId","currentRound","maxRounds","status","isReady","socket","transports","reconnectionAttempts","reconnectionDelay","autoConnect","timeout","current","handlers","connect","console","log","emit","disconnect","reason","connect_error","error","roomsList","roomCreated","data","prev","roomCode","roomJoined","playersReadyStatus","readyPlayers","includes","id","chatHistory","messages","Object","entries","forEach","event","handler","on","keys","off","handleCreateRoom","settings","roomSettings","handleJoinRoom","handleSpectateRoom","handlePlayerReady","className","children","setMaxRounds","rounds","onCreateRoom","onJoinRoom","onSpectateRoom","fileName","_jsxFileName","lineNumber","columnNumber","scores","onReady","_c","debounce","fn","delay","timer","args","clearTimeout","setTimeout","$RefreshReg$"],"sources":["/Users/thecold/Desktop/courses/2025 Spring/Software Engneering/Final Project/blast/frontend/src/components/MultiPlayer.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { API_BASE_URL } from '../config';\nimport GameRoom from './GameRoom';\nimport GameLobby from './GameLobby';\nimport SpectatorView from './SpectatorView';\nimport './MultiPlayer.css';\n\nfunction MultiPlayer() {\n    const socketRef = useRef(null);\n    const [rooms, setRooms] = useState([]); // 添加 rooms 状态\n    const [gameState, setGameState] = useState({\n        roomId: null,\n        currentRound: 0,\n        maxRounds: 3,\n        status: 'lobby',\n        isReady: false\n    });\n\n    useEffect(() => {\n        // 使用完整的配置选项\n        const socket = io(API_BASE_URL, {\n            transports: ['websocket', 'polling'],\n            reconnectionAttempts: 5,\n            reconnectionDelay: 1000,\n            autoConnect: true,\n            timeout: 10000,\n        });\n\n        socketRef.current = socket;\n\n        const handlers = {\n            connect: () => {\n                console.log('Connected to server');\n                socket.emit('getRooms'); // 连接后请求房间列表\n            },\n            disconnect: (reason) => {\n                console.log('Disconnected:', reason);\n            },\n            connect_error: (error) => {\n                console.error('Connection error:', error);\n            },\n            roomsList: (roomsList) => {\n                console.log('Received rooms list:', roomsList);\n                setRooms(roomsList); // 处理房间列表更新\n            },\n            roomCreated: (data) => {\n                setGameState(prev => ({\n                    ...prev,\n                    roomId: data.roomCode,\n                    status: 'room'\n                }));\n            },\n            roomJoined: (data) => {\n                setGameState(prev => ({\n                    ...prev,\n                    roomId: data.roomId,\n                    currentRound: data.currentRound,\n                    maxRounds: data.maxRounds,\n                    status: 'room'\n                }));\n            },\n            playersReadyStatus: ({ readyPlayers }) => {\n                // 处理玩家准备状态更新\n                console.log('Players ready status updated:', readyPlayers);\n                // 更新本地状态，标记当前玩家是否已准备\n                if (socketRef.current) {\n                    setGameState(prev => ({\n                        ...prev,\n                        isReady: readyPlayers.includes(socketRef.current.id)\n                    }));\n                }\n            },\n            chatHistory: (messages) => {\n                // 处理历史聊天记录\n                console.log('Received chat history:', messages);\n                // 这里可以将历史消息传递给GameRoom组件\n            },\n            error: console.error\n        };\n\n        Object.entries(handlers).forEach(([event, handler]) => {\n            socket.on(event, handler);\n        });\n\n        return () => {\n            if (socket) {\n                Object.keys(handlers).forEach(event => {\n                    socket.off(event);\n                });\n                socket.disconnect();\n            }\n        };\n    }, []);\n\n    const handleCreateRoom = useCallback((settings = {}) => {\n        if (!socketRef.current) return;\n        \n        const roomSettings = {\n            maxRounds: settings.maxRounds || 3\n        };\n\n        socketRef.current.emit('createRoom', roomSettings);\n    }, []);\n\n    const handleJoinRoom = (roomId) => {\n        if (socketRef.current) {\n            socketRef.current.emit('joinRoom', roomId);\n            setGameState(prev => ({\n                ...prev,\n                status: 'room'\n            }));\n        }\n    };\n\n    const handleSpectateRoom = (roomId) => {\n        if (socketRef.current) {\n            socketRef.current.emit('spectateRoom', roomId);\n            setGameState(prev => ({\n                ...prev,\n                status: 'spectate'\n            }));\n        }\n    };\n\n    const handlePlayerReady = () => {\n        if (socketRef.current && gameState.roomId) {\n            socketRef.current.emit('playerReady', { roomId: gameState.roomId });\n            setGameState(prev => ({\n                ...prev,\n                isReady: true\n            }));\n        }\n    };\n\n    return (\n        <div className=\"multiplayer-container\">\n            {gameState.status === 'lobby' && (\n                <GameLobby \n                    rooms={rooms}\n                    maxRounds={gameState.maxRounds}\n                    setMaxRounds={(rounds) => setGameState(prev => ({ ...prev, maxRounds: rounds }))}\n                    onCreateRoom={handleCreateRoom}\n                    onJoinRoom={handleJoinRoom}\n                    onSpectateRoom={handleSpectateRoom}\n                />\n            )}\n            \n            {gameState.status === 'room' && (\n                <GameRoom \n                    socket={socketRef.current}\n                    roomId={gameState.roomId}\n                    currentRound={gameState.currentRound}\n                    maxRounds={gameState.maxRounds}\n                    scores={gameState.scores}\n                    isReady={gameState.isReady}\n                    onReady={handlePlayerReady}\n                />\n            )}\n\n            {gameState.status === 'spectate' && (\n                <SpectatorView \n                    roomId={gameState.roomId}\n                    socket={socketRef.current}\n                />\n            )}\n        </div>\n    );\n}\n\n// 防抖函数\nfunction debounce(fn, delay) {\n    let timer = null;\n    return function(...args) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(() => fn(...args), delay);\n    };\n}\n\nexport default MultiPlayer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}