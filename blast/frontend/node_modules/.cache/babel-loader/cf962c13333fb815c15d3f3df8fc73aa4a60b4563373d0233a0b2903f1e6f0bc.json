{"ast":null,"code":"import React,{useState,useEffect,useCallback,useRef}from'react';import'./GameRoom.css';import{API_BASE_URL}from'../config';import GuessHistory from'./GuessHistory';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const decryptData=async encryptedData=>{const response=await fetch(`${API_BASE_URL}/api/decrypt`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({encryptedData})});return await response.json();};function GameRoom(_ref){let{roomId,socket,scores,currentRound,maxRounds}=_ref;const[gameState,setGameState]=useState({currentPlayer:null,timeLeft:60,guess:'',remainingGuesses:8,guessHistory:[]});const[playersGuesses,setPlayersGuesses]=useState({});const[messages,setMessages]=useState([]);const[suggestions,setSuggestions]=useState([]);const[newMessage,setNewMessage]=useState('');const[showGameResult,setShowGameResult]=useState(false);const[players,setPlayers]=useState({});const[isChatExpanded,setIsChatExpanded]=useState(true);const regionMapping={Asia:['China','Mongolia','Indonesia','Malaysia','Turkey','India'],Europe:['France','Germany','Sweden','Denmark','Poland','Spain','Italy','Ukraine','Finland','Norway']};const getRegion=country=>{for(const[region,countries]of Object.entries(regionMapping)){if(countries.includes(country)){return region;}}return'Other';};const getAge=birthYear=>2025-birthYear;const guessHistoryRef=useRef([]);const playersRef=useRef({});useEffect(()=>{fetch(`${API_BASE_URL}/api/players`).then(res=>res.json()).then(data=>setPlayers(data)).catch(err=>console.error('获取玩家数据失败:',err));if(!socket)return;const handleRoundStart=data=>{const simplePlayer={country:data.country,team:data.team,role:data.role,majapp:data.majapp,hiddenName:data.hiddenName};setGameState(prev=>({...prev,currentPlayer:simplePlayer,remainingGuesses:8,timeLeft:60,guess:''}));setPlayersGuesses({});};const handleRoundEnd=_ref2=>{let{winner,correctAnswer}=_ref2;setGameState(prev=>({...prev,showAnswer:true,currentPlayer:{...prev.currentPlayer,hiddenName:correctAnswer}}));setShowGameResult(true);};const handleChatMessage=message=>{setMessages(prev=>[...prev,message]);};socket.on('roundStart',handleRoundStart);socket.on('roundEnd',handleRoundEnd);socket.on('chatMessage',handleChatMessage);return()=>{socket.off('roundStart',handleRoundStart);socket.off('roundEnd',handleRoundEnd);socket.off('chatMessage',handleChatMessage);};},[socket,roomId]);const handleGuessResult=useCallback(_ref3=>{let{playerId,guess,result}=_ref3;if(!result)return;// 使用单层数据结构\nsetPlayersGuesses(prev=>({...prev,[playerId]:[...(prev[playerId]||[]),{name:guess,...result,timestamp:Date.now()}]}));},[]);useEffect(()=>{if(!socket)return;// 一次性注册所有事件监听器\nconst eventHandlers={'roundStart':data=>{const simpleData={country:data.country,team:data.team,role:data.role,majapp:data.majapp,hiddenName:data.hiddenName};setGameState(prev=>({...prev,currentPlayer:simpleData,remainingGuesses:8,timeLeft:60,guess:''}));setPlayersGuesses({});},'guessResult':handleGuessResult,'roundEnd':_ref4=>{let{winner,correctAnswer}=_ref4;setGameState(prev=>({...prev,showAnswer:true,currentPlayer:{...prev.currentPlayer,hiddenName:correctAnswer}}));setShowGameResult(true);}};// 注册事件\nObject.entries(eventHandlers).forEach(_ref5=>{let[event,handler]=_ref5;socket.on(event,handler);});// 清理函数\nreturn()=>{Object.keys(eventHandlers).forEach(event=>{socket.off(event);});};},[socket,handleGuessResult]);useEffect(()=>{if(!socket)return;const handleRoundStart=data=>{// 简化数据结构\nconst gameData={currentPlayer:{country:data.country,team:data.team,role:data.role,majapp:data.majapp,hiddenName:data.hiddenName},remainingGuesses:8,timeLeft:60,guess:''};setGameState(gameData);setPlayersGuesses({});};const handleGuessResult=data=>{// 使用简单数据结构\nsetPlayersGuesses(prev=>{const newGuesses={...prev};if(!newGuesses[data.playerId]){newGuesses[data.playerId]=[];}newGuesses[data.playerId].push(data.result);return newGuesses;});};socket.on('roundStart',handleRoundStart);socket.on('guessResult',handleGuessResult);return()=>{socket.off('roundStart',handleRoundStart);socket.off('guessResult',handleGuessResult);};},[socket]);useEffect(()=>{if(!socket)return;const handlers={roundStart:data=>{setGameState(prev=>({...prev,currentPlayer:{country:data.country,team:data.team,role:data.role,majapp:data.majapp,hiddenName:data.hiddenName},remainingGuesses:8,timeLeft:60,guess:''}));// 清理历史记录\nguessHistoryRef.current=[];}};// 注册事件处理器\nObject.entries(handlers).forEach(_ref6=>{let[event,handler]=_ref6;socket.on(event,handler);});return()=>{// 清理事件监听器\nObject.keys(handlers).forEach(event=>{socket.off(event);});};},[socket]);// 只依赖 socket\nconst handleInputChange=e=>{const value=e.target.value;setGameState(prev=>({...prev,guess:value}));if(!value.trim()){setSuggestions([]);return;}fetch(`${API_BASE_URL}/api/search-players?query=${value}`).then(response=>response.json()).then(data=>setSuggestions(data)).catch(error=>console.error('搜索选手失败:',error));};const handleGuess=()=>{if(!gameState.currentPlayer||gameState.remainingGuesses<=0||!gameState.guess.trim())return;const guessedPlayer=players[gameState.guess];if(!guessedPlayer)return;// 发送简化的猜测数据\nconst guessData={roomId,guess:gameState.guess,playerData:{name:gameState.guess,team:guessedPlayer.team,country:guessedPlayer.country,role:guessedPlayer.role,majapp:guessedPlayer.majapp}};socket.emit('submitGuess',guessData);setGameState(prev=>({...prev,remainingGuesses:prev.remainingGuesses-1,guess:''}));setSuggestions([]);};const sendMessage=()=>{if(!newMessage.trim()||!socket)return;const message={id:socket.id,content:newMessage,timestamp:Date.now()};socket.emit('chatMessage',{roomId,...message});setNewMessage('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"game-room\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"game-room-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"game-main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"game-header\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"\\u623F\\u95F4 #\",roomId]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-status\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"\\u56DE\\u5408: \",currentRound,\"/\",maxRounds]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"\\u5269\\u4F59\\u65F6\\u95F4: \",gameState.timeLeft,\"\\u79D2\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-section\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:gameState.guess,onChange:handleInputChange,placeholder:\"\\u8F93\\u5165\\u9009\\u624B\\u540D\\u5B57\",disabled:!gameState.currentPlayer||gameState.remainingGuesses<=0,className:\"player-input\"}),suggestions.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"suggestions-list\",children:suggestions.map(suggestion=>/*#__PURE__*/_jsx(\"div\",{className:\"suggestion-item\",onClick:()=>{setGameState(prev=>({...prev,guess:suggestion.name}));setSuggestions([]);},children:suggestion.name},suggestion.name))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"button-group\",children:/*#__PURE__*/_jsx(\"button\",{className:\"submit-guess\",onClick:handleGuess,disabled:!gameState.currentPlayer||gameState.remainingGuesses<=0,children:\"\\u63D0\\u4EA4\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"progress-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",style:{width:`${gameState.remainingGuesses/8*100}%`},children:gameState.remainingGuesses})}),/*#__PURE__*/_jsxs(\"div\",{className:\"guess-histories\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"player-history\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u4F60\\u7684\\u731C\\u6D4B\"}),/*#__PURE__*/_jsx(GuessHistory,{history:gameState.guessHistory})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"player-history\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u5BF9\\u624B\\u7684\\u731C\\u6D4B\"}),Object.entries(playersGuesses).map(_ref7=>{let[playerId,guesses]=_ref7;return playerId!==socket.id&&/*#__PURE__*/_jsx(GuessHistory,{history:guesses},playerId);})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:`chat-section ${isChatExpanded?'expanded':'collapsed'}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",onClick:()=>setIsChatExpanded(!isChatExpanded),children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u804A\\u5929\"}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-button\",children:isChatExpanded?'↓':'↑'})]}),/*#__PURE__*/_jsx(\"div\",{className:\"messages-container\",children:messages.map((msg,idx)=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${msg.id===socket.id?'self':''}`,children:[/*#__PURE__*/_jsx(\"span\",{className:\"message-time\",children:new Date(msg.timestamp).toLocaleTimeString()}),/*#__PURE__*/_jsx(\"span\",{className:\"message-content\",children:msg.content})]},idx))}),/*#__PURE__*/_jsxs(\"div\",{className:\"message-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newMessage,onChange:e=>setNewMessage(e.target.value),onKeyPress:e=>e.key==='Enter'&&sendMessage(),placeholder:\"\\u53D1\\u9001\\u6D88\\u606F...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,children:\"\\u53D1\\u9001\"})]})]})]}),showGameResult&&/*#__PURE__*/_jsxs(\"div\",{className:\"game-result-modal\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u56DE\\u5408\\u7ED3\\u675F\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u6B63\\u786E\\u7B54\\u6848: \",gameState.currentPlayer.hiddenName]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowGameResult(false),children:\"\\u7EE7\\u7EED\"})]})]});}export default/*#__PURE__*/React.memo(GameRoom);// 使用 memo 优化渲染","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","API_BASE_URL","GuessHistory","jsxs","_jsxs","jsx","_jsx","decryptData","encryptedData","response","fetch","method","headers","body","JSON","stringify","json","GameRoom","_ref","roomId","socket","scores","currentRound","maxRounds","gameState","setGameState","currentPlayer","timeLeft","guess","remainingGuesses","guessHistory","playersGuesses","setPlayersGuesses","messages","setMessages","suggestions","setSuggestions","newMessage","setNewMessage","showGameResult","setShowGameResult","players","setPlayers","isChatExpanded","setIsChatExpanded","regionMapping","Asia","Europe","getRegion","country","region","countries","Object","entries","includes","getAge","birthYear","guessHistoryRef","playersRef","then","res","data","catch","err","console","error","handleRoundStart","simplePlayer","team","role","majapp","hiddenName","prev","handleRoundEnd","_ref2","winner","correctAnswer","showAnswer","handleChatMessage","message","on","off","handleGuessResult","_ref3","playerId","result","name","timestamp","Date","now","eventHandlers","simpleData","_ref4","forEach","_ref5","event","handler","keys","gameData","newGuesses","push","handlers","roundStart","current","_ref6","handleInputChange","e","value","target","trim","handleGuess","guessedPlayer","guessData","playerData","emit","sendMessage","id","content","className","children","type","onChange","placeholder","disabled","length","map","suggestion","onClick","style","width","history","_ref7","guesses","msg","idx","toLocaleTimeString","onKeyPress","key","memo"],"sources":["/Users/thecold/Desktop/courses/Software Engneering/Final Project/BlastCSGO/frontend/src/components/GameRoom.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './GameRoom.css';\nimport { API_BASE_URL } from '../config';\nimport GuessHistory from './GuessHistory';\n\nconst decryptData = async (encryptedData) => {\n    const response = await fetch(`${API_BASE_URL}/api/decrypt`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ encryptedData }),\n    });\n    return await response.json();\n};\n\nfunction GameRoom({ roomId, socket, scores, currentRound, maxRounds }) {\n    const [gameState, setGameState] = useState({\n        currentPlayer: null,\n        timeLeft: 60,\n        guess: '',\n        remainingGuesses: 8,\n        guessHistory: [], \n    });\n    \n    const [playersGuesses, setPlayersGuesses] = useState({}); \n    const [messages, setMessages] = useState([]);\n\n    const [suggestions, setSuggestions] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [showGameResult, setShowGameResult] = useState(false);\n    const [players, setPlayers] = useState({});\n    const [isChatExpanded, setIsChatExpanded] = useState(true);\n\n    const regionMapping = {\n        Asia: ['China', 'Mongolia', 'Indonesia', 'Malaysia', 'Turkey', 'India'],\n        Europe: ['France', 'Germany', 'Sweden', 'Denmark', 'Poland', 'Spain', 'Italy', 'Ukraine', 'Finland', 'Norway'],\n    };\n\n    const getRegion = (country) => {\n        for (const [region, countries] of Object.entries(regionMapping)) {\n            if (countries.includes(country)) {\n                return region;\n            }\n        }\n        return 'Other';\n    };\n\n    const getAge = (birthYear) => 2025 - birthYear;\n\n    const guessHistoryRef = useRef([]);\n    const playersRef = useRef({});\n\n    useEffect(() => {\n        fetch(`${API_BASE_URL}/api/players`)\n            .then(res => res.json())\n            .then(data => setPlayers(data))\n            .catch(err => console.error('获取玩家数据失败:', err));\n\n        if (!socket) return;\n\n        const handleRoundStart = (data) => {\n            const simplePlayer = {\n                country: data.country,\n                team: data.team,\n                role: data.role,\n                majapp: data.majapp,\n                hiddenName: data.hiddenName\n            };\n            \n            setGameState(prev => ({\n                ...prev,\n                currentPlayer: simplePlayer,\n                remainingGuesses: 8,\n                timeLeft: 60,\n                guess: ''\n            }));\n            setPlayersGuesses({});\n        };\n\n        const handleRoundEnd = ({ winner, correctAnswer }) => {\n            setGameState(prev => ({\n                ...prev,\n                showAnswer: true,\n                currentPlayer: { ...prev.currentPlayer, hiddenName: correctAnswer }\n            }));\n            setShowGameResult(true);\n        };\n\n        const handleChatMessage = (message) => {\n            setMessages(prev => [...prev, message]);\n        };\n\n        socket.on('roundStart', handleRoundStart);\n        socket.on('roundEnd', handleRoundEnd);\n        socket.on('chatMessage', handleChatMessage);\n\n        return () => {\n            socket.off('roundStart', handleRoundStart);\n            socket.off('roundEnd', handleRoundEnd);\n            socket.off('chatMessage', handleChatMessage);\n        };\n    }, [socket, roomId]);\n\n    const handleGuessResult = useCallback(({ playerId, guess, result }) => {\n        if (!result) return;\n        \n        // 使用单层数据结构\n        setPlayersGuesses(prev => ({\n            ...prev,\n            [playerId]: [\n                ...(prev[playerId] || []),\n                {\n                    name: guess,\n                    ...result,\n                    timestamp: Date.now()\n                }\n            ]\n        }));\n    }, []);\n\n    useEffect(() => {\n        if (!socket) return;\n\n        // 一次性注册所有事件监听器\n        const eventHandlers = {\n            'roundStart': (data) => {\n                const simpleData = {\n                    country: data.country,\n                    team: data.team,\n                    role: data.role,\n                    majapp: data.majapp,\n                    hiddenName: data.hiddenName\n                };\n                \n                setGameState(prev => ({\n                    ...prev,\n                    currentPlayer: simpleData,\n                    remainingGuesses: 8,\n                    timeLeft: 60,\n                    guess: ''\n                }));\n                setPlayersGuesses({});\n            },\n            'guessResult': handleGuessResult,\n            'roundEnd': ({ winner, correctAnswer }) => {\n                setGameState(prev => ({\n                    ...prev,\n                    showAnswer: true,\n                    currentPlayer: {\n                        ...prev.currentPlayer,\n                        hiddenName: correctAnswer\n                    }\n                }));\n                setShowGameResult(true);\n            }\n        };\n\n        // 注册事件\n        Object.entries(eventHandlers).forEach(([event, handler]) => {\n            socket.on(event, handler);\n        });\n\n        // 清理函数\n        return () => {\n            Object.keys(eventHandlers).forEach(event => {\n                socket.off(event);\n            });\n        };\n    }, [socket, handleGuessResult]);\n\n    useEffect(() => {\n        if (!socket) return;\n\n        const handleRoundStart = (data) => {\n            // 简化数据结构\n            const gameData = {\n                currentPlayer: {\n                    country: data.country,\n                    team: data.team,\n                    role: data.role,\n                    majapp: data.majapp,\n                    hiddenName: data.hiddenName\n                },\n                remainingGuesses: 8,\n                timeLeft: 60,\n                guess: ''\n            };\n            \n            setGameState(gameData);\n            setPlayersGuesses({});\n        };\n\n        const handleGuessResult = (data) => {\n            // 使用简单数据结构\n            setPlayersGuesses(prev => {\n                const newGuesses = { ...prev };\n                if (!newGuesses[data.playerId]) {\n                    newGuesses[data.playerId] = [];\n                }\n                newGuesses[data.playerId].push(data.result);\n                return newGuesses;\n            });\n        };\n\n        socket.on('roundStart', handleRoundStart);\n        socket.on('guessResult', handleGuessResult);\n        \n        return () => {\n            socket.off('roundStart', handleRoundStart);\n            socket.off('guessResult', handleGuessResult);\n        };\n    }, [socket]);\n\n    useEffect(() => {\n        if (!socket) return;\n        \n        const handlers = {\n            roundStart: (data) => {\n                setGameState(prev => ({\n                    ...prev,\n                    currentPlayer: {\n                        country: data.country,\n                        team: data.team,\n                        role: data.role,\n                        majapp: data.majapp,\n                        hiddenName: data.hiddenName\n                    },\n                    remainingGuesses: 8,\n                    timeLeft: 60,\n                    guess: ''\n                }));\n                // 清理历史记录\n                guessHistoryRef.current = [];\n            }\n        };\n\n        // 注册事件处理器\n        Object.entries(handlers).forEach(([event, handler]) => {\n            socket.on(event, handler);\n        });\n\n        return () => {\n            // 清理事件监听器\n            Object.keys(handlers).forEach(event => {\n                socket.off(event);\n            });\n        };\n    }, [socket]); // 只依赖 socket\n\n    const handleInputChange = (e) => {\n        const value = e.target.value;\n        setGameState((prev) => ({ ...prev, guess: value }));\n\n        if (!value.trim()) {\n            setSuggestions([]);\n            return;\n        }\n\n        fetch(`${API_BASE_URL}/api/search-players?query=${value}`)\n            .then((response) => response.json())\n            .then((data) => setSuggestions(data))\n            .catch((error) => console.error('搜索选手失败:', error));\n    };\n\n    const handleGuess = () => {\n        if (!gameState.currentPlayer || gameState.remainingGuesses <= 0 || !gameState.guess.trim()) return;\n\n        const guessedPlayer = players[gameState.guess];\n        if (!guessedPlayer) return;\n\n        // 发送简化的猜测数据\n        const guessData = {\n            roomId,\n            guess: gameState.guess,\n            playerData: {\n                name: gameState.guess,\n                team: guessedPlayer.team,\n                country: guessedPlayer.country,\n                role: guessedPlayer.role,\n                majapp: guessedPlayer.majapp\n            }\n        };\n\n        socket.emit('submitGuess', guessData);\n\n        setGameState(prev => ({\n            ...prev,\n            remainingGuesses: prev.remainingGuesses - 1,\n            guess: ''\n        }));\n        setSuggestions([]);\n    };\n\n    const sendMessage = () => {\n        if (!newMessage.trim() || !socket) return;\n\n        const message = {\n            id: socket.id,\n            content: newMessage,\n            timestamp: Date.now(),\n        };\n\n        socket.emit('chatMessage', { roomId, ...message });\n        setNewMessage('');\n    };\n\n    return (\n        <div className=\"game-room\">\n            <div className=\"game-room-container\">\n                {/* 左侧游戏区域 */}\n                <div className=\"game-main\">\n                    <div className=\"game-header\">\n                        <h2>房间 #{roomId}</h2>\n                        <div className=\"game-status\">\n                            <span>回合: {currentRound}/{maxRounds}</span>\n                            <span>剩余时间: {gameState.timeLeft}秒</span>\n                        </div>\n                    </div>\n\n                    {/* 单人模式风格的输入区域 */}\n                    <div className=\"input-section\">\n                        <input\n                            type=\"text\"\n                            value={gameState.guess}\n                            onChange={handleInputChange}\n                            placeholder=\"输入选手名字\"\n                            disabled={!gameState.currentPlayer || gameState.remainingGuesses <= 0}\n                            className=\"player-input\"\n                        />\n                        {suggestions.length > 0 && (\n                            <div className=\"suggestions-list\">\n                                {suggestions.map((suggestion) => (\n                                    <div\n                                        key={suggestion.name}\n                                        className=\"suggestion-item\"\n                                        onClick={() => {\n                                            setGameState((prev) => ({ ...prev, guess: suggestion.name }));\n                                            setSuggestions([]);\n                                        }}\n                                    >\n                                        {suggestion.name}\n                                    </div>\n                                ))}\n                            </div>\n                        )}\n                    </div>\n\n                    <div className=\"button-group\">\n                        <button\n                            className=\"submit-guess\"\n                            onClick={handleGuess}\n                            disabled={!gameState.currentPlayer || gameState.remainingGuesses <= 0}\n                        >\n                            提交\n                        </button>\n                    </div>\n\n                    <div className=\"progress-container\">\n                        <div\n                            className=\"progress-bar\"\n                            style={{width: `${(gameState.remainingGuesses / 8) * 100}%`}}\n                        >\n                            {gameState.remainingGuesses}\n                        </div>\n                    </div>\n\n                    {/* 将猜测历史区域分为两列显示 */}\n                    <div className=\"guess-histories\">\n                        <div className=\"player-history\">\n                            <h3>你的猜测</h3>\n                            <GuessHistory history={gameState.guessHistory} />\n                        </div>\n                        <div className=\"player-history\">\n                            <h3>对手的猜测</h3>\n                            {Object.entries(playersGuesses).map(([playerId, guesses]) => (\n                                playerId !== socket.id && (\n                                    <GuessHistory key={playerId} history={guesses} />\n                                )\n                            ))}\n                        </div>\n                    </div>\n                </div>\n\n                <div className={`chat-section ${isChatExpanded ? 'expanded' : 'collapsed'}`}>\n                    <div className=\"chat-header\" onClick={() => setIsChatExpanded(!isChatExpanded)}>\n                        <h3>聊天</h3>\n                        <button className=\"toggle-button\">\n                            {isChatExpanded ? '↓' : '↑'}\n                        </button>\n                    </div>\n                    <div className=\"messages-container\">\n                        {messages.map((msg, idx) => (\n                            <div key={idx} className={`message ${msg.id === socket.id ? 'self' : ''}`}>\n                                <span className=\"message-time\">\n                                    {new Date(msg.timestamp).toLocaleTimeString()}\n                                </span>\n                                <span className=\"message-content\">{msg.content}</span>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"message-input\">\n                        <input\n                            type=\"text\"\n                            value={newMessage}\n                            onChange={(e) => setNewMessage(e.target.value)}\n                            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                            placeholder=\"发送消息...\"\n                        />\n                        <button onClick={sendMessage}>发送</button>\n                    </div>\n                </div>\n            </div>\n\n            {showGameResult && (\n                <div className=\"game-result-modal\">\n                    <h3>回合结束</h3>\n                    <p>正确答案: {gameState.currentPlayer.hiddenName}</p>\n                    <button onClick={() => setShowGameResult(false)}>继续</button>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default React.memo(GameRoom); // 使用 memo 优化渲染"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}