{"ast":null,"code":"var _jsxFileName = \"/Users/thecold/Desktop/courses/2025 Spring/Software Engneering/Final Project/blast/frontend/src/components/MultiPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { API_BASE_URL } from '../config';\nimport GameRoom from './GameRoom';\nimport GameLobby from './GameLobby';\nimport SpectatorView from './SpectatorView';\nimport './MultiPlayer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MultiPlayer() {\n  _s();\n  const socketRef = useRef(null);\n  const [rooms, setRooms] = useState([]); // 添加 rooms 状态\n  const [gameState, setGameState] = useState({\n    roomId: null,\n    currentRound: 0,\n    maxRounds: 3,\n    status: 'lobby',\n    isReady: false,\n    scores: {} // 初始化分数对象\n  });\n  useEffect(() => {\n    // 使用完整的配置选项\n    const socket = io(API_BASE_URL, {\n      transports: ['websocket', 'polling'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true,\n      timeout: 10000\n    });\n    socketRef.current = socket;\n    const handlers = {\n      connect: () => {\n        console.log('Connected to server');\n        socket.emit('getRooms'); // 连接后请求房间列表\n      },\n      disconnect: reason => {\n        console.log('Disconnected:', reason);\n      },\n      connect_error: error => {\n        console.error('Connection error:', error);\n      },\n      roomsList: roomsList => {\n        console.log('Received rooms list:', roomsList);\n        setRooms(roomsList); // 处理房间列表更新\n      },\n      roomCreated: data => {\n        setGameState(prev => ({\n          ...prev,\n          roomId: data.roomCode,\n          status: 'room'\n        }));\n      },\n      roomJoined: data => {\n        setGameState(prev => ({\n          ...prev,\n          roomId: data.roomId,\n          currentRound: data.currentRound,\n          maxRounds: data.maxRounds,\n          status: 'room'\n        }));\n      },\n      playersReadyStatus: ({\n        readyPlayers\n      }) => {\n        // 处理玩家准备状态更新\n        console.log('Players ready status updated:', readyPlayers);\n        // 更新本地状态，标记当前玩家是否已准备\n        if (socketRef.current) {\n          setGameState(prev => ({\n            ...prev,\n            isReady: readyPlayers.includes(socketRef.current.id)\n          }));\n        }\n      },\n      roundEnd: ({\n        winner,\n        correctAnswer,\n        scores\n      }) => {\n        // 处理回合结束，更新分数\n        console.log('Round ended, winner:', winner, 'scores:', scores);\n        if (scores) {\n          // 将服务器返回的分数数组转换为对象\n          const scoresObj = {};\n          scores.forEach(([playerId, score]) => {\n            scoresObj[playerId] = score;\n          });\n          setGameState(prev => ({\n            ...prev,\n            scores: scoresObj\n          }));\n        }\n      },\n      gameEnd: ({\n        winners,\n        scores\n      }) => {\n        // 处理游戏结束，更新最终分数\n        console.log('Game ended, winners:', winners, 'scores:', scores);\n        if (scores) {\n          // 将服务器返回的分数数组转换为对象\n          const scoresObj = {};\n          scores.forEach(([playerId, score]) => {\n            scoresObj[playerId] = score;\n          });\n          setGameState(prev => ({\n            ...prev,\n            scores: scoresObj\n          }));\n        }\n      },\n      roomClosed: ({\n        roomId\n      }) => {\n        // 处理房间关闭事件，返回大厅\n        console.log(`房间 ${roomId} 已关闭`);\n        setGameState(prev => ({\n          ...prev,\n          status: 'lobby',\n          roomId: null,\n          currentRound: 0,\n          scores: {}\n        }));\n      },\n      chatHistory: messages => {\n        // 处理历史聊天记录\n        console.log('Received chat history:', messages);\n        // 这里可以将历史消息传递给GameRoom组件\n      },\n      error: console.error\n    };\n    Object.entries(handlers).forEach(([event, handler]) => {\n      socket.on(event, handler);\n    });\n    return () => {\n      if (socket) {\n        Object.keys(handlers).forEach(event => {\n          socket.off(event);\n        });\n        socket.disconnect();\n      }\n    };\n  }, []);\n  const handleCreateRoom = useCallback((settings = {}) => {\n    if (!socketRef.current) return;\n    const roomSettings = {\n      maxRounds: settings.maxRounds || 3\n    };\n    socketRef.current.emit('createRoom', roomSettings);\n  }, []);\n  const handleJoinRoom = roomId => {\n    if (socketRef.current) {\n      socketRef.current.emit('joinRoom', roomId);\n      setGameState(prev => ({\n        ...prev,\n        status: 'room'\n      }));\n    }\n  };\n  const handleSpectateRoom = roomId => {\n    if (socketRef.current) {\n      socketRef.current.emit('spectateRoom', roomId);\n      setGameState(prev => ({\n        ...prev,\n        status: 'spectate'\n      }));\n    }\n  };\n  const handlePlayerReady = () => {\n    if (socketRef.current && gameState.roomId) {\n      socketRef.current.emit('playerReady', {\n        roomId: gameState.roomId\n      });\n      setGameState(prev => ({\n        ...prev,\n        isReady: true\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"multiplayer-container\",\n    children: [gameState.status === 'lobby' && /*#__PURE__*/_jsxDEV(GameLobby, {\n      rooms: rooms,\n      maxRounds: gameState.maxRounds,\n      setMaxRounds: rounds => setGameState(prev => ({\n        ...prev,\n        maxRounds: rounds\n      })),\n      onCreateRoom: () => handleCreateRoom({\n        maxRounds: gameState.maxRounds\n      }),\n      onJoinRoom: handleJoinRoom,\n      onSpectateRoom: handleSpectateRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }, this), gameState.status === 'room' && /*#__PURE__*/_jsxDEV(GameRoom, {\n      socket: socketRef.current,\n      roomId: gameState.roomId,\n      currentRound: gameState.currentRound,\n      maxRounds: gameState.maxRounds,\n      scores: gameState.scores,\n      isReady: gameState.isReady,\n      onReady: handlePlayerReady,\n      onReturnToLobby: () => setGameState(prev => ({\n        ...prev,\n        status: 'lobby'\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }, this), gameState.status === 'spectate' && /*#__PURE__*/_jsxDEV(SpectatorView, {\n      roomId: gameState.roomId,\n      socket: socketRef.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n}\n\n// 防抖函数\n_s(MultiPlayer, \"WRBBavIpr+SlO3hCFbtNOlnWOzM=\");\n_c = MultiPlayer;\nfunction debounce(fn, delay) {\n  let timer = null;\n  return function (...args) {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => fn(...args), delay);\n  };\n}\nexport default MultiPlayer;\nvar _c;\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","io","API_BASE_URL","GameRoom","GameLobby","SpectatorView","jsxDEV","_jsxDEV","MultiPlayer","_s","socketRef","rooms","setRooms","gameState","setGameState","roomId","currentRound","maxRounds","status","isReady","scores","socket","transports","reconnectionAttempts","reconnectionDelay","autoConnect","timeout","current","handlers","connect","console","log","emit","disconnect","reason","connect_error","error","roomsList","roomCreated","data","prev","roomCode","roomJoined","playersReadyStatus","readyPlayers","includes","id","roundEnd","winner","correctAnswer","scoresObj","forEach","playerId","score","gameEnd","winners","roomClosed","chatHistory","messages","Object","entries","event","handler","on","keys","off","handleCreateRoom","settings","roomSettings","handleJoinRoom","handleSpectateRoom","handlePlayerReady","className","children","setMaxRounds","rounds","onCreateRoom","onJoinRoom","onSpectateRoom","fileName","_jsxFileName","lineNumber","columnNumber","onReady","onReturnToLobby","_c","debounce","fn","delay","timer","args","clearTimeout","setTimeout","$RefreshReg$"],"sources":["/Users/thecold/Desktop/courses/2025 Spring/Software Engneering/Final Project/blast/frontend/src/components/MultiPlayer.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { API_BASE_URL } from '../config';\nimport GameRoom from './GameRoom';\nimport GameLobby from './GameLobby';\nimport SpectatorView from './SpectatorView';\nimport './MultiPlayer.css';\n\nfunction MultiPlayer() {\n    const socketRef = useRef(null);\n    const [rooms, setRooms] = useState([]); // 添加 rooms 状态\n    const [gameState, setGameState] = useState({\n        roomId: null,\n        currentRound: 0,\n        maxRounds: 3,\n        status: 'lobby',\n        isReady: false,\n        scores: {} // 初始化分数对象\n    });\n\n    useEffect(() => {\n        // 使用完整的配置选项\n        const socket = io(API_BASE_URL, {\n            transports: ['websocket', 'polling'],\n            reconnectionAttempts: 5,\n            reconnectionDelay: 1000,\n            autoConnect: true,\n            timeout: 10000,\n        });\n\n        socketRef.current = socket;\n\n        const handlers = {\n            connect: () => {\n                console.log('Connected to server');\n                socket.emit('getRooms'); // 连接后请求房间列表\n            },\n            disconnect: (reason) => {\n                console.log('Disconnected:', reason);\n            },\n            connect_error: (error) => {\n                console.error('Connection error:', error);\n            },\n            roomsList: (roomsList) => {\n                console.log('Received rooms list:', roomsList);\n                setRooms(roomsList); // 处理房间列表更新\n            },\n            roomCreated: (data) => {\n                setGameState(prev => ({\n                    ...prev,\n                    roomId: data.roomCode,\n                    status: 'room'\n                }));\n            },\n            roomJoined: (data) => {\n                setGameState(prev => ({\n                    ...prev,\n                    roomId: data.roomId,\n                    currentRound: data.currentRound,\n                    maxRounds: data.maxRounds,\n                    status: 'room'\n                }));\n            },\n            playersReadyStatus: ({ readyPlayers }) => {\n                // 处理玩家准备状态更新\n                console.log('Players ready status updated:', readyPlayers);\n                // 更新本地状态，标记当前玩家是否已准备\n                if (socketRef.current) {\n                    setGameState(prev => ({\n                        ...prev,\n                        isReady: readyPlayers.includes(socketRef.current.id)\n                    }));\n                }\n            },\n            roundEnd: ({ winner, correctAnswer, scores }) => {\n                // 处理回合结束，更新分数\n                console.log('Round ended, winner:', winner, 'scores:', scores);\n                if (scores) {\n                    // 将服务器返回的分数数组转换为对象\n                    const scoresObj = {};\n                    scores.forEach(([playerId, score]) => {\n                        scoresObj[playerId] = score;\n                    });\n                    \n                    setGameState(prev => ({\n                        ...prev,\n                        scores: scoresObj\n                    }));\n                }\n            },\n            gameEnd: ({ winners, scores }) => {\n                // 处理游戏结束，更新最终分数\n                console.log('Game ended, winners:', winners, 'scores:', scores);\n                if (scores) {\n                    // 将服务器返回的分数数组转换为对象\n                    const scoresObj = {};\n                    scores.forEach(([playerId, score]) => {\n                        scoresObj[playerId] = score;\n                    });\n                    \n                    setGameState(prev => ({\n                        ...prev,\n                        scores: scoresObj\n                    }));\n                }\n            },\n            roomClosed: ({ roomId }) => {\n                // 处理房间关闭事件，返回大厅\n                console.log(`房间 ${roomId} 已关闭`);\n                setGameState(prev => ({\n                    ...prev,\n                    status: 'lobby',\n                    roomId: null,\n                    currentRound: 0,\n                    scores: {}\n                }));\n            },\n            chatHistory: (messages) => {\n                // 处理历史聊天记录\n                console.log('Received chat history:', messages);\n                // 这里可以将历史消息传递给GameRoom组件\n            },\n            error: console.error\n        };\n\n        Object.entries(handlers).forEach(([event, handler]) => {\n            socket.on(event, handler);\n        });\n\n        return () => {\n            if (socket) {\n                Object.keys(handlers).forEach(event => {\n                    socket.off(event);\n                });\n                socket.disconnect();\n            }\n        };\n    }, []);\n\n    const handleCreateRoom = useCallback((settings = {}) => {\n        if (!socketRef.current) return;\n        \n        const roomSettings = {\n            maxRounds: settings.maxRounds || 3\n        };\n\n        socketRef.current.emit('createRoom', roomSettings);\n    }, []);\n\n    const handleJoinRoom = (roomId) => {\n        if (socketRef.current) {\n            socketRef.current.emit('joinRoom', roomId);\n            setGameState(prev => ({\n                ...prev,\n                status: 'room'\n            }));\n        }\n    };\n\n    const handleSpectateRoom = (roomId) => {\n        if (socketRef.current) {\n            socketRef.current.emit('spectateRoom', roomId);\n            setGameState(prev => ({\n                ...prev,\n                status: 'spectate'\n            }));\n        }\n    };\n\n    const handlePlayerReady = () => {\n        if (socketRef.current && gameState.roomId) {\n            socketRef.current.emit('playerReady', { roomId: gameState.roomId });\n            setGameState(prev => ({\n                ...prev,\n                isReady: true\n            }));\n        }\n    };\n\n    return (\n        <div className=\"multiplayer-container\">\n            {gameState.status === 'lobby' && (\n                <GameLobby \n                    rooms={rooms}\n                    maxRounds={gameState.maxRounds}\n                    setMaxRounds={(rounds) => setGameState(prev => ({ ...prev, maxRounds: rounds }))}\n                    onCreateRoom={() => handleCreateRoom({ maxRounds: gameState.maxRounds })}\n                    onJoinRoom={handleJoinRoom}\n                    onSpectateRoom={handleSpectateRoom}\n                />\n            )}\n            \n            {gameState.status === 'room' && (\n                <GameRoom \n                    socket={socketRef.current}\n                    roomId={gameState.roomId}\n                    currentRound={gameState.currentRound}\n                    maxRounds={gameState.maxRounds}\n                    scores={gameState.scores}\n                    isReady={gameState.isReady}\n                    onReady={handlePlayerReady}\n                    onReturnToLobby={() => setGameState(prev => ({ ...prev, status: 'lobby' }))}\n                />\n            )}\n\n            {gameState.status === 'spectate' && (\n                <SpectatorView \n                    roomId={gameState.roomId}\n                    socket={socketRef.current}\n                />\n            )}\n        </div>\n    );\n}\n\n// 防抖函数\nfunction debounce(fn, delay) {\n    let timer = null;\n    return function(...args) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(() => fn(...args), delay);\n    };\n}\n\nexport default MultiPlayer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AACvE,SAASC,EAAE,QAAQ,kBAAkB;AACrC,SAASC,YAAY,QAAQ,WAAW;AACxC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC;IACvCkB,MAAM,EAAE,IAAI;IACZC,YAAY,EAAE,CAAC;IACfC,SAAS,EAAE,CAAC;IACZC,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE,CAAC,CAAC,CAAC;EACf,CAAC,CAAC;EAEFtB,SAAS,CAAC,MAAM;IACZ;IACA,MAAMuB,MAAM,GAAGpB,EAAE,CAACC,YAAY,EAAE;MAC5BoB,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;MACpCC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE,IAAI;MACvBC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE;IACb,CAAC,CAAC;IAEFhB,SAAS,CAACiB,OAAO,GAAGN,MAAM;IAE1B,MAAMO,QAAQ,GAAG;MACbC,OAAO,EAAEA,CAAA,KAAM;QACXC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QAClCV,MAAM,CAACW,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;MAC7B,CAAC;MACDC,UAAU,EAAGC,MAAM,IAAK;QACpBJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,MAAM,CAAC;MACxC,CAAC;MACDC,aAAa,EAAGC,KAAK,IAAK;QACtBN,OAAO,CAACM,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MAC7C,CAAC;MACDC,SAAS,EAAGA,SAAS,IAAK;QACtBP,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEM,SAAS,CAAC;QAC9CzB,QAAQ,CAACyB,SAAS,CAAC,CAAC,CAAC;MACzB,CAAC;MACDC,WAAW,EAAGC,IAAI,IAAK;QACnBzB,YAAY,CAAC0B,IAAI,KAAK;UAClB,GAAGA,IAAI;UACPzB,MAAM,EAAEwB,IAAI,CAACE,QAAQ;UACrBvB,MAAM,EAAE;QACZ,CAAC,CAAC,CAAC;MACP,CAAC;MACDwB,UAAU,EAAGH,IAAI,IAAK;QAClBzB,YAAY,CAAC0B,IAAI,KAAK;UAClB,GAAGA,IAAI;UACPzB,MAAM,EAAEwB,IAAI,CAACxB,MAAM;UACnBC,YAAY,EAAEuB,IAAI,CAACvB,YAAY;UAC/BC,SAAS,EAAEsB,IAAI,CAACtB,SAAS;UACzBC,MAAM,EAAE;QACZ,CAAC,CAAC,CAAC;MACP,CAAC;MACDyB,kBAAkB,EAAEA,CAAC;QAAEC;MAAa,CAAC,KAAK;QACtC;QACAd,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEa,YAAY,CAAC;QAC1D;QACA,IAAIlC,SAAS,CAACiB,OAAO,EAAE;UACnBb,YAAY,CAAC0B,IAAI,KAAK;YAClB,GAAGA,IAAI;YACPrB,OAAO,EAAEyB,YAAY,CAACC,QAAQ,CAACnC,SAAS,CAACiB,OAAO,CAACmB,EAAE;UACvD,CAAC,CAAC,CAAC;QACP;MACJ,CAAC;MACDC,QAAQ,EAAEA,CAAC;QAAEC,MAAM;QAAEC,aAAa;QAAE7B;MAAO,CAAC,KAAK;QAC7C;QACAU,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEiB,MAAM,EAAE,SAAS,EAAE5B,MAAM,CAAC;QAC9D,IAAIA,MAAM,EAAE;UACR;UACA,MAAM8B,SAAS,GAAG,CAAC,CAAC;UACpB9B,MAAM,CAAC+B,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAEC,KAAK,CAAC,KAAK;YAClCH,SAAS,CAACE,QAAQ,CAAC,GAAGC,KAAK;UAC/B,CAAC,CAAC;UAEFvC,YAAY,CAAC0B,IAAI,KAAK;YAClB,GAAGA,IAAI;YACPpB,MAAM,EAAE8B;UACZ,CAAC,CAAC,CAAC;QACP;MACJ,CAAC;MACDI,OAAO,EAAEA,CAAC;QAAEC,OAAO;QAAEnC;MAAO,CAAC,KAAK;QAC9B;QACAU,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEwB,OAAO,EAAE,SAAS,EAAEnC,MAAM,CAAC;QAC/D,IAAIA,MAAM,EAAE;UACR;UACA,MAAM8B,SAAS,GAAG,CAAC,CAAC;UACpB9B,MAAM,CAAC+B,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAEC,KAAK,CAAC,KAAK;YAClCH,SAAS,CAACE,QAAQ,CAAC,GAAGC,KAAK;UAC/B,CAAC,CAAC;UAEFvC,YAAY,CAAC0B,IAAI,KAAK;YAClB,GAAGA,IAAI;YACPpB,MAAM,EAAE8B;UACZ,CAAC,CAAC,CAAC;QACP;MACJ,CAAC;MACDM,UAAU,EAAEA,CAAC;QAAEzC;MAAO,CAAC,KAAK;QACxB;QACAe,OAAO,CAACC,GAAG,CAAC,MAAMhB,MAAM,MAAM,CAAC;QAC/BD,YAAY,CAAC0B,IAAI,KAAK;UAClB,GAAGA,IAAI;UACPtB,MAAM,EAAE,OAAO;UACfH,MAAM,EAAE,IAAI;UACZC,YAAY,EAAE,CAAC;UACfI,MAAM,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;MACP,CAAC;MACDqC,WAAW,EAAGC,QAAQ,IAAK;QACvB;QACA5B,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE2B,QAAQ,CAAC;QAC/C;MACJ,CAAC;MACDtB,KAAK,EAAEN,OAAO,CAACM;IACnB,CAAC;IAEDuB,MAAM,CAACC,OAAO,CAAChC,QAAQ,CAAC,CAACuB,OAAO,CAAC,CAAC,CAACU,KAAK,EAAEC,OAAO,CAAC,KAAK;MACnDzC,MAAM,CAAC0C,EAAE,CAACF,KAAK,EAAEC,OAAO,CAAC;IAC7B,CAAC,CAAC;IAEF,OAAO,MAAM;MACT,IAAIzC,MAAM,EAAE;QACRsC,MAAM,CAACK,IAAI,CAACpC,QAAQ,CAAC,CAACuB,OAAO,CAACU,KAAK,IAAI;UACnCxC,MAAM,CAAC4C,GAAG,CAACJ,KAAK,CAAC;QACrB,CAAC,CAAC;QACFxC,MAAM,CAACY,UAAU,CAAC,CAAC;MACvB;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMiC,gBAAgB,GAAGnE,WAAW,CAAC,CAACoE,QAAQ,GAAG,CAAC,CAAC,KAAK;IACpD,IAAI,CAACzD,SAAS,CAACiB,OAAO,EAAE;IAExB,MAAMyC,YAAY,GAAG;MACjBnD,SAAS,EAAEkD,QAAQ,CAAClD,SAAS,IAAI;IACrC,CAAC;IAEDP,SAAS,CAACiB,OAAO,CAACK,IAAI,CAAC,YAAY,EAAEoC,YAAY,CAAC;EACtD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAItD,MAAM,IAAK;IAC/B,IAAIL,SAAS,CAACiB,OAAO,EAAE;MACnBjB,SAAS,CAACiB,OAAO,CAACK,IAAI,CAAC,UAAU,EAAEjB,MAAM,CAAC;MAC1CD,YAAY,CAAC0B,IAAI,KAAK;QAClB,GAAGA,IAAI;QACPtB,MAAM,EAAE;MACZ,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;EAED,MAAMoD,kBAAkB,GAAIvD,MAAM,IAAK;IACnC,IAAIL,SAAS,CAACiB,OAAO,EAAE;MACnBjB,SAAS,CAACiB,OAAO,CAACK,IAAI,CAAC,cAAc,EAAEjB,MAAM,CAAC;MAC9CD,YAAY,CAAC0B,IAAI,KAAK;QAClB,GAAGA,IAAI;QACPtB,MAAM,EAAE;MACZ,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;EAED,MAAMqD,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAI7D,SAAS,CAACiB,OAAO,IAAId,SAAS,CAACE,MAAM,EAAE;MACvCL,SAAS,CAACiB,OAAO,CAACK,IAAI,CAAC,aAAa,EAAE;QAAEjB,MAAM,EAAEF,SAAS,CAACE;MAAO,CAAC,CAAC;MACnED,YAAY,CAAC0B,IAAI,KAAK;QAClB,GAAGA,IAAI;QACPrB,OAAO,EAAE;MACb,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;EAED,oBACIZ,OAAA;IAAKiE,SAAS,EAAC,uBAAuB;IAAAC,QAAA,GACjC5D,SAAS,CAACK,MAAM,KAAK,OAAO,iBACzBX,OAAA,CAACH,SAAS;MACNO,KAAK,EAAEA,KAAM;MACbM,SAAS,EAAEJ,SAAS,CAACI,SAAU;MAC/ByD,YAAY,EAAGC,MAAM,IAAK7D,YAAY,CAAC0B,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEvB,SAAS,EAAE0D;MAAO,CAAC,CAAC,CAAE;MACjFC,YAAY,EAAEA,CAAA,KAAMV,gBAAgB,CAAC;QAAEjD,SAAS,EAAEJ,SAAS,CAACI;MAAU,CAAC,CAAE;MACzE4D,UAAU,EAAER,cAAe;MAC3BS,cAAc,EAAER;IAAmB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CACJ,EAEArE,SAAS,CAACK,MAAM,KAAK,MAAM,iBACxBX,OAAA,CAACJ,QAAQ;MACLkB,MAAM,EAAEX,SAAS,CAACiB,OAAQ;MAC1BZ,MAAM,EAAEF,SAAS,CAACE,MAAO;MACzBC,YAAY,EAAEH,SAAS,CAACG,YAAa;MACrCC,SAAS,EAAEJ,SAAS,CAACI,SAAU;MAC/BG,MAAM,EAAEP,SAAS,CAACO,MAAO;MACzBD,OAAO,EAAEN,SAAS,CAACM,OAAQ;MAC3BgE,OAAO,EAAEZ,iBAAkB;MAC3Ba,eAAe,EAAEA,CAAA,KAAMtE,YAAY,CAAC0B,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEtB,MAAM,EAAE;MAAQ,CAAC,CAAC;IAAE;MAAA6D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/E,CACJ,EAEArE,SAAS,CAACK,MAAM,KAAK,UAAU,iBAC5BX,OAAA,CAACF,aAAa;MACVU,MAAM,EAAEF,SAAS,CAACE,MAAO;MACzBM,MAAM,EAAEX,SAAS,CAACiB;IAAQ;MAAAoD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;;AAEA;AAAAzE,EAAA,CA/MSD,WAAW;AAAA6E,EAAA,GAAX7E,WAAW;AAgNpB,SAAS8E,QAAQA,CAACC,EAAE,EAAEC,KAAK,EAAE;EACzB,IAAIC,KAAK,GAAG,IAAI;EAChB,OAAO,UAAS,GAAGC,IAAI,EAAE;IACrB,IAAID,KAAK,EAAEE,YAAY,CAACF,KAAK,CAAC;IAC9BA,KAAK,GAAGG,UAAU,CAAC,MAAML,EAAE,CAAC,GAAGG,IAAI,CAAC,EAAEF,KAAK,CAAC;EAChD,CAAC;AACL;AAEA,eAAehF,WAAW;AAAC,IAAA6E,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}